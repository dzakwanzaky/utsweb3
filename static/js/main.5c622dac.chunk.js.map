{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","background","menu","setState","name","colors","colorSelected","divStyle","backgroundColor","width","height","react_default","a","createElement","onClick","handleButton","style","marginBottom","textAlign","lineHeight","_this2","indexColor","findIndex","color","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","items","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCuEzBC,2BAlEb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAChBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,WAAa,SAJER,uEAOVS,GAENN,KAAKO,SAAS,CACZC,KAAMF,EAAKE,KACXH,WAAYC,EAAKD,uDAKnB,MAAM,CACJI,OAAS,CACP,QACA,SAEFC,cAAgB,0CAMlB,IAGIC,EAAW,CACbC,gBAAgBZ,KAAKI,MAAMM,cAC3BG,MAAM,IACNC,OAAO,KAMT,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAASlB,KAAKmB,aAAcC,MAdtB,CAChBC,aAAa,IAaX,cACFN,EAAAC,EAAAC,cAAA,OAAKG,MAAOT,GACVI,EAAAC,EAAAC,cAAA,MAAIG,MARM,CACZE,UAAW,SACXC,WAAW,IAMYvB,KAAKI,MAAMM,wDAMxB,IAIRA,EAJQc,EAAAxB,KACRyB,EAAazB,KAAKI,MAAMK,OAAOiB,UACjC,SAAAC,GAAK,OAAIA,GAASH,EAAKpB,MAAMM,gBAI7BA,EAD4C,qBAAnCV,KAAKI,MAAMuB,MAAMF,EAAW,GACrB,QAEAzB,KAAKI,MAAMK,OAAOgB,EAAW,GAG/CzB,KAAKO,SAAS,CAAEG,yBA7DFkB,cCQZC,SAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxC,QACfkC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,gHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,UAO5BU,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,KC3EjEC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,CAAKC,MAZP,CACZ,CACEjD,KAAO,QACPH,WAAa,SAGf,CACEG,KAAO,QACPmB,MAAQ,YAKV+B,SAASC,eAAe,SDAnB,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,WAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,OAAQ,WAC9B,IAAM5B,EAAK,GAAA6B,OAAMJ,WAAN,sBAEPhC,GAgEV,SAAiCO,EAAOC,GAEtC6B,MAAM9B,GACHK,KAAK,SAAA0B,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ClC,UAAUC,cAAckC,MAAMhC,KAAK,SAAAC,GACjCA,EAAagC,aAAajC,KAAK,WAC7BV,OAAOC,SAAS2C,aAKpBxC,EAAgBC,EAAOC,KAG1Be,MAAM,WACLJ,QAAQC,IACN,mEArFA2B,CAAwBxC,EAAOC,GAI/BC,UAAUC,cAAckC,MAAMhC,KAAK,WACjCO,QAAQC,IACN,+GAMJd,EAAgBC,EAAOC,MCzB/BE","file":"static/js/main.5c622dac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n     background : 'white'\r\n    };\r\n  }\r\n  clicked(menu){\r\n    //untuk memperbarui state sesuai dengan menu yang dipilih\r\n    this.setState({\r\n      name: menu.name,\r\n      background: menu.background\r\n      //active: menu,\r\n    });\r\n  }\r\n  getInitialState(){\r\n    return{\r\n      colors : [\r\n        'black',\r\n        'white'\r\n      ],\r\n      colorSelected : 'white'\r\n    }\r\n  }\r\n  \r\n \r\n  render() {\r\n    var buttonStyle = {\r\n      marginBottom:4\r\n    };\r\n    var divStyle = {\r\n      backgroundColor:this.state.colorSelected,\r\n      width:200,\r\n      height:200\r\n    };\r\n    var h1Style = {\r\n      textAlign: 'center',\r\n      lineHeight:6\r\n    }\r\n    return(\r\n      <div>\r\n        <button onClick={this.handleButton} style={buttonStyle}>Ganti Tema</button>\r\n      <div style={divStyle}>\r\n        <h1 style={h1Style}>{this.state.colorSelected}</h1>\r\n      </div>\r\n      </div>\r\n    );\r\n  \r\n  }\r\n  handleButton(){\r\n    var indexColor = this.state.colors.findIndex(\r\n      color => color == this.state.colorSelected\r\n    );\r\n    var colorSelected;\r\n    if (typeof this.state.color[indexColor+1] === 'undefined') {\r\n      colorSelected = 'white';\r\n    } else {\r\n      colorSelected = this.state.colors[indexColor+1];\r\n    }\r\n\r\n    this.setState({ colorSelected });\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './Custom.css'; //import cssnya\r\nimport App from './App';\r\nimport { appendFile } from 'fs';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//const items = ['Merah','Kuning','Hijau','Biru'];\r\n\r\nconst items = [\r\n  {\r\n    name : \"white\",\r\n    background : 'white',\r\n   \r\n  },\r\n  {\r\n    name : \"black\",\r\n    color : 'black',\r\n  }\r\n];\r\n\r\nReactDOM.render(<App items={items}/>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}